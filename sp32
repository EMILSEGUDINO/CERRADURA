#include <WiFi.h>
#include <PubSubClient.h> #include <WiFiClientSecure.h>

// Configurar los parámetros de red Wi-Fi
const char* ssid = "mi-SSID"; // Nombre de la red Wi-Fi
const char* password = "mi-password"; // Contraseña de la red Wi-Fi


// Configurar el servidor MQTT (AWS IoT Core)
const char* mqtt_server = "mi-iot-endpoint.amazonaws.com";	// Endpoint de AWS IoT Core
const int mqtt_port = 8883; // Puerto de conexión MQTT seguro


WiFiClientSecure net; PubSubClient client(net);

// Certificados y claves (descargados desde AWS IoT Core) const char* ca_cert = \
"-----BEGIN CERTIFICATE	\n" \
"your-ca-cert\n" \
"-----END CERTIFICATE	\n";


const char* client_cert = \
"-----BEGIN CERTIFICATE	\n" \
"your-client-cert\n" \
 
"-----END CERTIFICATE	\n";


const char* client_key = \
"-----BEGIN PRIVATE KEY	\n" \
"your-private-key\n" \
"-----END PRIVATE KEY	\n";


// Función para conectarse a la red Wi-Fi void setup_wifi() {
delay(10);
Serial.println();
Serial.print("Conectando a "); Serial.println(ssid);

WiFi.begin(ssid, password);


while (WiFi.status() != WL_CONNECTED) { delay(500);
Serial.print(".");
}


Serial.println(""); Serial.println("WiFi conectado");
}


// Callback que recibe mensajes MQTT
void callback(char* topic, byte* payload, unsigned int length) { Serial.print("Mensaje recibido en topic: ");
Serial.print(topic);
 
Serial.print(". Mensaje: "); for (int i = 0; i < length; i++) {
Serial.print((char)payload[i]);
}
Serial.println();
}


void reconnect() {
while (!client.connected()) { Serial.print("Intentando conectar a MQTT..."); if (client.connect("ESP32Client")) { Serial.println("conectado!");
client.subscribe("devices/proyectoDevice/commands");
} else { Serial.print("falló, rc=");
Serial.print(client.state());
Serial.println(" intentando de nuevo en 5 segundos..."); delay(5000);
}
}
}


void setup() { Serial.begin(115200); setup_wifi();

// Configurar certificados net.setCACert(ca_cert); net.setCertificate(client_cert);
 
net.setPrivateKey(client_key);


client.setServer(mqtt_server, mqtt_port); client.setCallback(callback);
}


void loop() {
if (!client.connected()) { reconnect();
}
client.loop();


// Publicar un mensaje en el tema MQTT
String message = "{\"sensor\": \"volumetric\", \"status\": \"Partially Full\"}"; client.publish("devices/proyectoDevice/data", message.c_str());

delay(5000); // Publicar datos cada 5 segundos

#include <WiFi.h>
#include <WiFiClientSecure.h> #include <PubSubClient.h>
 
// Configurar red Wi-Fi
const char* ssid = "your-SSID";
const char* password = "mi-password";


// Endpoint MQTT de AWS IoT Core
const char* mqtt_server = "mi-iot-endpoint.amazonaws.com"; // Encuentra tu endpoint en AWS IoT Core Settings
const int mqtt_port = 8883; // Puerto seguro para MQTT


WiFiClientSecure net; PubSubClient client(net);

// Certificados y claves de AWS IoT Core (descargados previamente) const char* ca_cert = \
"-----BEGIN CERTIFICATE	\n" \
"your-ca-cert\n" \
"-----END CERTIFICATE	\n";


const char* client_cert = \
"-----BEGIN CERTIFICATE	\n" \
"your-client-cert\n" \
"-----END CERTIFICATE	\n";


const char* client_key = \
"-----BEGIN PRIVATE KEY	\n" \
"your-private-key\n" \
"-----END PRIVATE KEY	\n";


// Función para conectarse a la red Wi-Fi void setup_wifi() {
 
delay(10);
Serial.println();
Serial.print("Conectando a "); Serial.println(ssid);

WiFi.begin(ssid, password);


while (WiFi.status() != WL_CONNECTED) { delay(500);
Serial.print(".");
}


Serial.println(""); Serial.println("WiFi conectado");
}


// Callback para recibir mensajes MQTT
void callback(char* topic, byte* payload, unsigned int length) { Serial.print("Mensaje recibido en topic: ");
Serial.print(topic); Serial.print(". Mensaje: "); for (int i = 0; i < length; i++) {
Serial.print((char)payload[i]);
}
Serial.println();
}


// Función para reconectar al broker MQTT void reconnect() {
 
while (!client.connected()) { Serial.print("Conectando a MQTT..."); if (client.connect("SimulatedESP32")) { Serial.println("Conectado!");
client.subscribe("devices/proyectoESP32/commands");
} else { Serial.print("Falló, rc=");
Serial.print(client.state());
Serial.println(" Intentando de nuevo en 5 segundos..."); delay(5000);
}
}
}


void setup() { Serial.begin(115200); setup_wifi();

// Configuración de los certificados net.setCACert(ca_cert); net.setCertificate(client_cert); net.setPrivateKey(client_key);

client.setServer(mqtt_server, mqtt_port); client.setCallback(callback);
}


void loop() {
if (!client.connected()) {
 
reconnect();
}
client.loop();


// Publicar datos en el tema MQTT
String message = "{\"sensor\": \"volumetric\", \"status\": \"Partially Full\"}"; client.publish("devices/proyectoESP32/data", message.c_str());

delay(5000); // Enviar datos cada 5 segundos
}
